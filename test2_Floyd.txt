
#include<string.h>
#include<stdio.h>  
#include<stdlib.h> 

#define MAX_NAME 5 // 顶点字符串的最大长度+1
#define MAX_INFO 20 // 相关信息字符串的最大长度+1
typedef int VRType;
typedef char VertexType[MAX_NAME];
typedef char InfoType;

 // 邻接矩阵存储结构
#define INFINITY 1000 // 用整型最大值代替∞
#define MAX_VERTEX_NUM 26 // 最大顶点个数

typedef struct
{
	VRType adj; // 顶点关系类型。对无权图，
	// 用1(是)或0(否)表示相邻否；
	// 对带权图，则为权值
	InfoType *info; // 该弧相关信息的指针(可无)
}ArcCell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];
// 二维数组
struct MGraph
{
	VertexType vexs[MAX_VERTEX_NUM]; // 顶点向量
	AdjMatrix arcs; // 邻接矩阵
	int vexnum,arcnum; // 图的当前顶点数和弧数
};

typedef int PathMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM][MAX_VERTEX_NUM]; // 3维数组
typedef int DistancMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM]; // 2维数组

int LocateVex(MGraph G,VertexType u)
{ // 初始条件：图G存在，u和G中顶点有相同特征
	// 操作结果：若G中存在顶点u，则返回该顶点在图中位置；否则返回-1
	int i;
	for(i=0;i<G.vexnum;++i)
		if(strcmp(u,G.vexs[i])==0)
			return i;
	return -1;
}

void CreateDN(MGraph &G)
{ // 采用数组(邻接矩阵)表示法，构造有向网G
	int i,j,k,w,IncInfo;
	char s[MAX_INFO];
	VertexType va,vb;
	printf("请输入有向网G的顶点数,弧数,弧是否含其它信息(是:1,否:0): ");
	scanf("%d,%d,%d",&G.vexnum,&G.arcnum,&IncInfo);
	printf("请输入%d个顶点的值(<%d个字符):\n",G.vexnum,MAX_NAME);
	for(i=0;i<G.vexnum;++i) // 构造顶点向量
		scanf("%s",G.vexs[i]);
	for(i=0;i<G.vexnum;++i) // 初始化邻接矩阵
		for(j=0;j<G.vexnum;++j)
		{
			G.arcs[i][j].adj=INFINITY; // 网
			G.arcs[i][j].info=NULL;
		}
	printf("请输入%d条弧的弧尾 弧头 权值(以空格作为间隔): \n",G.arcnum);
	for(k=0;k<G.arcnum;++k)
	{
		scanf("%s%s%d%*c",va,vb,&w); // %*c吃掉回车符
		i=LocateVex(G,va);
		j=LocateVex(G,vb);
		G.arcs[i][j].adj=w; // 有向网
		if(IncInfo)
		{
			printf("请输入该弧的相关信息(<%d个字符): ",MAX_INFO);
			gets(s);
			w=strlen(s);
			if(w)
			{
				G.arcs[i][j].info=(char*)malloc((w+1)*sizeof(char)); // 有向
				strcpy(G.arcs[i][j].info,s);
			}
		}
	}
}

void FLOYD(MGraph G,PathMatrix P,DistancMatrix D)
{ // 用Floyd算法求有向网G中各对顶点v和w之间的最短路径P[v][w]及其带权长度D[v][w]。
	// 若P[v][w][u]为TRUE，则u是从v到w当前求得最短路径上的顶点。
	int u,v,w,i;
	for(v=0;v<G.vexnum;v++) // 各对结点之间初始已知路径及距离
		for(w=0;w<G.vexnum;w++)
		{
			D[v][w]=G.arcs[v][w].adj; // 顶点v到顶点w的直接距离
			for(u=0;u<G.vexnum;u++)
				P[v][w][u]=false; // 路径矩阵初值
			if(D[v][w]<INFINITY) // 从v到w有直接路径
				P[v][w][v]=P[v][w][w]=true; // 由v到w的路径经过v和w两点
		}
	for(u=0;u<G.vexnum;u++)
		for(v=0;v<G.vexnum;v++)
			for(w=0;w<G.vexnum;w++)
				if(D[v][u]<INFINITY&&D[u][w]<INFINITY&&D[v][u]+D[u][w]<D[v][w])
				{ // 从v经u到w的一条路径更短
					D[v][w]=D[v][u]+D[u][w]; // 更新最短距离
					for(i=0;i<G.vexnum;i++)
						P[v][w][i]=P[v][u][i]||P[u][w][i]; // 从v到w的路径经过从v到u和从u到w的所有路径
				}
}

int main()
{
	MGraph g;
	int i,j,k,l,m,n;
	PathMatrix p; // 3维数组
	DistancMatrix d; // 2维数组
	CreateDN(g); // 构造有向网g
	for(i=0;i<g.vexnum;i++)
	g.arcs[i][i].adj=0; // ShortestPath_FLOYD()要求对角元素值为0，因为两点相同，其距离为0
	FLOYD(g,p,d); // 求每对顶点间的最短路径，
	printf("矩阵:\n");
	for(i=0;i<g.vexnum;i++)
	{
		for(j=0;j<g.vexnum;j++)
			printf("%6d",d[i][j]);
		printf("\n");
	}
	for(i=0;i<g.vexnum;i++)
		for(j=0;j<g.vexnum;j++)
			if(i!=j)
				printf("%s->%s的最短距离:%d\n",g.vexs[i],g.vexs[j],d[i][j]);
	printf("\n");
	for(i=0;i<g.vexnum;i++)
		for(j=0;j<g.vexnum;j++)
			if(i!=j)
			{
				printf("%s->%s经过：",g.vexs[i],g.vexs[j]);
				for(k=0;k<g.vexnum;k++)
					if(p[i][j][k]==1)
						printf("%s ",g.vexs[k]);
				printf("\n");
			}
	return 0;
}
//1 2 2
//1 3 6
//1 4 4
//2 3 3
//3 1 7
//3 4 1
//4 1 5
//4 3 12


